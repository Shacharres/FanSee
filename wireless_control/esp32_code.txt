#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

#define LED_PIN 2

static BLEUUID serviceUUID("b7e6f2b0-3c7f-4b9d-9c78-1b2a5d5d1e01");
static BLEUUID charUUID   ("b7e6f2b1-3c7f-4b9d-9c78-1b2a5d5d1e01");

BLEServer* pServer = nullptr;
BLEAdvertising* pAdvertising = nullptr;

class ServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* s) override {
    // Optional: you can lower connection params here if needed
  }
  void onDisconnect(BLEServer* s) override {
    // Important: start advertising again so the next run can find us
    delay(50);                     // small guard to let stack settle
    pAdvertising->start();
  }
};

class LEDWriteCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* c) override {
    String v = c->getValue();
    if (v.length() == 0) return;
    v.trim(); v.toUpperCase();
    if (v == "1" || v == "ON" || v == "H") digitalWrite(LED_PIN, HIGH);
    if (v == "0" || v == "OFF"|| v == "L") digitalWrite(LED_PIN, LOW);
  }
};

void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  BLEDevice::init("ESP32-LED");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new ServerCallbacks());   // <â€” add this

  BLEService* pService = pServer->createService(serviceUUID);
  BLECharacteristic* pChar = pService->createCharacteristic(
    charUUID,
    BLECharacteristic::PROPERTY_WRITE | BLECharacteristic::PROPERTY_READ
  );
  pChar->setCallbacks(new LEDWriteCallbacks());
  pChar->setValue("OFF");
  pService->start();

  pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(serviceUUID);
  pAdvertising->setScanResponse(true);
  // Optional iOS-friendly params:
  // pAdvertising->setMinPreferred(0x06);
  // pAdvertising->setMinPreferred(0x12);

  pAdvertising->start();
}

void loop() { /* nothing */ }
